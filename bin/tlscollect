#!/usr/bin/env ruby
#

require 'getoptlong'
require 'socket'

$: << File.join(File.dirname(__FILE__), "..", "lib")
require 'tlscollect'

opts = GetoptLong.new(
  [ '--host', '-H', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--addr', '-a', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--port', '-p', GetoptLong::REQUIRED_ARGUMENT ]
)

host = addr = nil
port = 443
opts.each do |opt, arg|
  case opt
    when '--host'
      host = arg
    when '--addr'
      addr = arg
    when '--port'
      port = arg.to_i
  end
end

unless addr || host
  puts "You must specify a hostname or IP address (or both!)"
  puts "  --host <host>"
  puts "  --addr <address> [optional]"
  puts "  --port <port> [default: 443]"
  exit 0
end

host ||= "Unknown"
addrs = (addr ? [addr] : TCPSocket.gethostbyname(host)[3..-1])
puts "Beginning collection for the following addresses:\n\t#{addrs.join("\n\t")}\n"
addrs.each do |addr|
  puts "\nTLS configuration for #{host} (#{addr}), port #{port}\n\n"

  collector = TLSCollect::Collector.new(:host => host, :addr => addr, :port => port)
  collector.collect

  puts "available protocols:\n\t#{collector.protocols.join("\n\t")}\n\n"
  puts "certificate:"
  puts "\tsubject: #{collector.certificate.cn}"
  # puts "\tverified: #{collector.certificate.verified ? "YES" : "NO"}"
  puts "\tvalid for host: #{collector.certificate.valid?(host) ? "YES" : "NO"}"
  puts "\tkey length: #{collector.certificate.key_length}#{collector.certificate.short? ? " (TOO SHORT)" : ""}"
  puts "\thash algorithm: #{collector.certificate.hash_algorithm}"
  puts "\tencryption algorithm: #{collector.certificate.encryption_algorithm}"
  puts "\tissued: #{collector.certificate.raw.not_before}"
  puts "\texpires: #{collector.certificate.raw.not_after}#{(collector.certificate.expired? ? " (EXPIRED)" : "")}#{collector.certificate.longevity? ? "" : " (TOO LONG)"}"
  puts "default cipher:\n\t#{collector.default_cipher.cipher}\n\n"
  puts "available ciphers:\n\t#{collector.ciphers.map{|cipher| cipher.cipher}.join("\n\t")}\n\n"
end